'use client'

import { useEffect, useState } from 'react'
import { useRouter } from 'next/navigation'
import { supabase } from '@/lib/supabaseClient'
import Sidebar from '@/components/SideBar'
import TaskBox from '@/components/TaskBox'
import SubjectModal from '@/components/SubjectModal'
import UsernameModal from '@/components/UsernameModal'
import { PlusCircle } from 'lucide-react'

interface Subject {
Â  subject_id: number
Â  title: string
Â  color: string
Â  is_stressful: boolean
}

interface Profile {
Â  Â  username: string | null;
}

export default function Dashboard() {
Â  const router = useRouter()
Â  const [loading, setLoading] = useState(true)
Â  const [subjects, setSubjects] = useState<Subject[]>([])
Â  const [error, setError] = useState<string | null>(null)
Â  const [profile, setProfile] = useState<Profile | null>(null);
Â  
Â  const [isSubjectModalOpen, setIsSubjectModalOpen] = useState(false)
Â  const [editingSubject, setEditingSubject] = useState<Subject | null>(null)
Â  const [isUsernameModalOpen, setIsUsernameModalOpen] = useState(false);
Â  const [isSavingUsername, setIsSavingUsername] = useState(false);

Â  const fetchSubjects = async (userId: string) => {
Â  Â  const { data, error } = await supabase
Â  Â  Â  .from('subjects')
Â  Â  Â  .select('subject_id, title, color, is_stressful')
Â  Â  Â  .eq('user_id', userId)
Â  Â  Â  .order('subject_id', { ascending: true })

Â  Â  if (error) throw new Error('Failed to load subjects');
Â  Â  setSubjects(data || [])
Â  }

Â  const fetchProfile = async (userId: string) => {
Â  Â  const { data, error } = await supabase
Â  Â  Â  Â  .from('profiles')
Â  Â  Â  Â  .select('username')
Â  Â  Â  Â  .eq('id', userId)
Â  Â  Â  Â  .single();
Â  Â  
Â  Â  if (error && error.code !== 'PGRST116') { // PGRST116 means no rows found, which is fine
Â  Â  Â  Â  throw new Error('Failed to load profile');
Â  Â  }

Â  Â  if (!data || !data.username) {
Â  Â  Â  Â  setIsUsernameModalOpen(true);
Â  Â  }
Â  Â  setProfile(data);
Â  }

Â  useEffect(() => {
Â  Â  const loadData = async () => {
Â  Â  Â  Â  setLoading(true);
Â  Â  Â  Â  const { data: { user } } = await supabase.auth.getUser();
Â  Â  Â  Â  if (!user) {
Â  Â  Â  Â  Â  Â  router.replace('/login');
Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  await fetchProfile(user.id);
Â  Â  Â  Â  Â  Â  await fetchSubjects(user.id);
        // ***** FIX: Correctly typed the catch block to satisfy the linter *****
Â  Â  Â  Â  } catch (e) {
            if (e instanceof Error) {
Â  Â  Â  Â  Â  Â      setError(e.message);
            } else {
                setError("An unknown error occurred.");
            }
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  }
Â  Â  }
Â  Â  loadData()
Â  }, [router])

Â  const handleOpenAddModal = () => {
Â  Â  Â  setEditingSubject(null)
Â  Â  Â  setIsSubjectModalOpen(true)
Â  }

Â  const handleOpenEditModal = (subject: Subject) => {
Â  Â  Â  setEditingSubject(subject)
Â  Â  Â  setIsSubjectModalOpen(true)
Â  }

Â  const handleSaveSubject = async ({ title, color, is_stressful }: { title: string, color: string, is_stressful: boolean }) => {
Â  Â  const { data: { user } } = await supabase.auth.getUser();
Â  Â  if (!user) return;

Â  Â  if (editingSubject) {
Â  Â  Â  Â  await supabase.from('subjects').update({ title, color, is_stressful }).eq('subject_id', editingSubject.subject_id);
Â  Â  } else {
Â  Â  Â  Â  await supabase.from('subjects').insert({ title, color, is_stressful, user_id: user.id });
Â  Â  }
Â  Â  await fetchSubjects(user.id);
Â  Â  setIsSubjectModalOpen(false);
Â  }

Â  const handleDeleteSubject = async (subjectId: number) => {
Â  Â  Â  if (window.confirm("Are you sure? This will delete the subject and all its chapters and tasks.")) {
Â  Â  Â  Â  Â  await supabase.from('subjects').delete().eq('subject_id', subjectId);
Â  Â  Â  Â  Â  const { data: { user } } = await supabase.auth.getUser();
Â  Â  Â  Â  if (user) await fetchSubjects(user.id);
Â  Â  Â  }
Â  }

Â  const handleSaveUsername = async (username: string) => {
Â  Â  setIsSavingUsername(true);
Â  Â  const { data: { user } } = await supabase.auth.getUser();
Â  Â  if (!user) {
Â  Â  Â  Â  setError("You must be logged in to set a username.");
Â  Â  Â  Â  setIsSavingUsername(false);
Â  Â  Â  Â  return;
Â  Â  }

Â  Â  const { error } = await supabase
Â  Â  Â  Â  .from('profiles')
Â  Â  Â  Â  .upsert({ 
Â  Â  Â  Â  Â  Â  id: user.id, 
Â  Â  Â  Â  Â  Â  username, 
Â  Â  Â  Â  Â  Â  updated_at: new Date().toISOString() 
Â  Â  Â  Â  })
Â  Â  Â  Â  .select()

Â  Â  if (error) {
Â  Â  Â  Â  setError("Failed to save username. It might already be taken.");
Â  Â  } else {
Â  Â  Â  Â  setProfile({ username });
Â  Â  Â  Â  setIsUsernameModalOpen(false);
Â  Â  }
Â  Â  setIsSavingUsername(false);
Â  }

Â  if (loading) return (
Â  Â  <div style={styles.loadingContainer}><div style={styles.loadingSpinner}></div></div>
Â  )

Â  if (error) return (
Â  Â  <div style={styles.errorContainer}><p style={styles.errorText}>{error}</p></div>
Â  )

Â  return (
Â  Â  <>
Â  Â  Â  <UsernameModal 
Â  Â  Â  Â  isOpen={isUsernameModalOpen}
Â  Â  Â  Â  onSave={handleSaveUsername}
Â  Â  Â  Â  loading={isSavingUsername}
Â  Â  Â  />
Â  Â  Â  <SubjectModal 
Â  Â  Â  Â  isOpen={isSubjectModalOpen}
Â  Â  Â  Â  onClose={() => setIsSubjectModalOpen(false)}
Â  Â  Â  Â  onSave={handleSaveSubject}
Â  Â  Â  Â  subjectToEdit={editingSubject}
Â  Â  Â  />
Â  Â  Â  <div style={styles.layoutContainer}>
Â  Â  Â  Â  <Sidebar />
Â  Â  Â  Â  <div style={styles.mainWrapper}>
Â  Â  Â  Â  Â  <main style={styles.mainContent}>
Â  Â  Â  Â  Â  Â  <div style={styles.contentInner}>
Â  Â  Â  Â  Â  Â  Â  <div style={styles.headerContainer}>
Â  Â  Â  Â  Â  Â  Â  Â  <h1 style={styles.greeting}>Hi {profile?.username || 'there'} ðŸ‘‹</h1>
Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={handleOpenAddModal} style={styles.addSubjectButton}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <PlusCircle size={20} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span>Add Subject</span>
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  <div style={styles.cardsContainer}>
Â  Â  Â  Â  Â  Â  Â  Â  {subjects.map(subject => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <TaskBox
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  key={subject.subject_id}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  subject={subject}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onEdit={() => handleOpenEditModal(subject)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onDelete={() => handleDeleteSubject(subject.subject_id)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </main>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  </>
Â  )
}

const styles: { [key: string]: React.CSSProperties } = {
Â  layoutContainer: { display: 'flex', minHeight: '100vh', backgroundColor: '#0f172a' },
Â  mainWrapper: { flex: 1, marginLeft: '240px', minHeight: '100vh', overflow: 'auto' },
Â  mainContent: { padding: '2rem', minHeight: '100vh', color: '#ffffff' },
Â  contentInner: { 
Â  Â  maxWidth: '1200px', 
Â  Â  margin: '0 auto', 
Â  },
Â  loadingContainer: { minHeight: '100vh', backgroundColor: '#0f172a', display: 'flex', alignItems: 'center', justifyContent: 'center' },
Â  loadingSpinner: { width: '40px', height: '40px', border: '3px solid #1e293b', borderTop: '3px solid #4f46e5', borderRadius: '50%', animation: 'spin 1s linear infinite' },
Â  errorContainer: { minHeight: '100vh', backgroundColor: '#0f172a', display: 'flex', alignItems: 'center', justifyContent: 'center' },
Â  errorText: { color: '#f87171', fontSize: '1rem' },
Â  headerContainer: {
Â  Â  display: 'flex',
Â  Â  justifyContent: 'space-between',
Â  Â  alignItems: 'center',
Â  Â  flexWrap: 'wrap',
Â  Â  gap: '1rem',
Â  Â  marginBottom: '3rem',
Â  },
Â  greeting: { fontSize: '2.5rem', fontWeight: 600, color: '#f1f5f9' },
Â  addSubjectButton: {
Â  Â  Â  display: 'flex', alignItems: 'center', gap: '0.5rem',
Â  Â  Â  backgroundColor: '#4f46e5', color: 'white',
Â  Â  Â  padding: '0.75rem 1.25rem', borderRadius: '0.75rem',
Â  Â  Â  border: 'none', cursor: 'pointer', fontWeight: 600,
Â  },
Â  cardsContainer: {
Â  Â  display: 'grid',
Â  Â  gridTemplateColumns: 'repeat(auto-fit, minmax(380px, 1fr))',
Â  Â  gap: '2rem',
Â  },
}
// hi